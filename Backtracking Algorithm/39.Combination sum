class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        #先把备选数排个序吧
        candidates.sort()
        n = len(candidates)
        res = []
        #i为从哪开始递归的索引，temp_sum为当前暂时的和，temp为当前的数字组合list
        def backtrack(i,temp_sum,temp):
            #如果目前的和已经超了（失败了），或者已经遍历到最后了，那回溯
            if temp_sum > target or i == n:
                return 
            #如果此时已经成功了
            if temp_sum == target:
                res.append(temp)
                return
            for j in range(i,n):
                if temp_sum + candidates[j] > target:
                    break
                backtrack(j,temp_sum + candidates[j],temp+[candidates[j]])
            
        backtrack(0,0,[])
        return res
