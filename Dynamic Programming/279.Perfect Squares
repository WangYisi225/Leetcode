#完全背包问题
#python测试用例通过90%，在达到5000+数字级时超时

import math

class Solution:
    def numSquares(self, n: int) -> int:
        #可以选择的最大平方数
        Max_sq = int(math.sqrt(n))
        #动态规划矩阵表格，横轴为可选的动作（平方数），纵轴为状态（到n之前所有数字）
        dp = [[0 for i in range(n)]for j in range(Max_sq)]
        #第一行边界条件
        for first_row in range(n):
            dp[0][first_row] = first_row + 1
        #第一列边界条件
        for first_column in range(Max_sq):
            dp[first_column][0] = 1
        #开始动态规划
        for i in range(1,Max_sq):
            for j in range(1,n):
                if j+1 < (i+1)**2:
                    dp[i][j] = dp[i-1][j]
                elif j+1 == (i+1)**2:
                    dp[i][j] = 1
                else:
                    dp[i][j] = min(dp[i-1][j],dp[i][j-(i+1)**2]+dp[i][(i+1)**2-1])
        
        return dp[Max_sq-1][n-1]
